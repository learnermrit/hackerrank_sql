 
Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
The CITY table is described as follows:

: SELECT * FROM CITY WHERE POPULATION > 100000 AND COUNTRYCODE='USA'



Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
The CITY table is described as follows:

:SELECT NAME FROM CITY WHERE POPULATION > 120000 AND COUNTRYCODE='USA'

Query all columns (attributes) for every row in the CITY table.
The CITY table is described as follows:
: SELECT * FROM CITY 


Query all columns for a city in CITY with the ID 1661.
The CITY table is described as follows:
 SELECT * FROM CITY WHERE ID=1661

Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
SELECT * FROM CITY WHERE COUNTRYCODE='JPN'

Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
The CITY table is described as follows:
SELECT NAME FROM CITY WHERE COUNTRYCODE='JPN'



Query a list of CITY and STATE from the STATION table.
The STATION table is described as follows:
SELECT CITY,STATE FROM STATION



Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
The STATION table is described as follows:
SELECT DISTINCT CITY FROM STATION WHERE MOD(STATION.ID,2)=0 ORDER BY CITY

Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
SELECT COUNT(DISTINCT CITY) FROM STATION //THIS IS FOR Distinct city
select  (count(CITY)- count(distinct CITY)) from STATION;

Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
select CITY,LENGTH(CITY) from STATION order by Length(CITY) asc, CITY limit 1; 
select CITY,LENGTH(CITY) from STATION order by Length(CITY) desc, CITY limit 1; 


Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
select t.city from station t where lower(SUBSTR(city,1,1)) in ('a','e','i','o','u')

Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
select DISTINCT t.city from station t where t.city REGEXP '[aeiouAEIOU]$';

Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
select DISTINCT t.city from station t where t.city REGEXP '^[aeiou].*[aeiou]$';



Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
select DISTINCT t.city from station t where t.city REGEXP '^[bcdfghjklmnpqrstvwxyz]';
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY NOT RLIKE '^[aeiouAEIOU]';



Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
select DISTINCT t.city from station t where t.city NOT RLIKE '^[aeiou].*[aeiou]$';








Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
SELECT NAME 
FROM STUDENTS 
WHERE MARKS >75 
ORDER BY substring(NAME,-3,3),id ;



Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

select name
from Employee
order by name;






select name
from Employee
where salary>2000 AND months<10 
order by employee_id;


Query the difference between the maximum and minimum populations in CITY.

Select max(population)-min(population)
from city




Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

/*
Enter your query here.
*/
Select
case
 when (A+B>C) and (B+C>A) and (C+A>B) then
   case
    when(a=b)and(b=c) then 'Equilateral'
    when (a=b) or(b=c) or(c=a) then 'Isosceles'
    else 'Scalene'
   end
else 'Not A Triangle'
end
FROM TRIANGLES;





